/* 初始化 start */
/*清除元素默认的内外边距  */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/*让所有斜体 不倾斜*/
em,i {
  font-style: normal;
}
/*去掉列表前面的小点*/
li {
  list-style: none;
}
/*图片没有边框   去掉图片底侧的空白缝隙*/
img {
  border: 0; /*ie6*/
  vertical-align: middle;
}
/*让button 按钮 变成小手*/
button {
  cursor: pointer;
}
/*取消链接的下划线*/
a {
  color: #666;
  text-decoration: none;
}

a:hover {
  color: #e33333;
}
h4{
  font-weight: normal;
}
/* 初始化end */


body{
  background: url("../images/bg.jpg") no-repeat;
  /* 背景缩放：我们要塞满！ */
  background-size: cover;
}
/* // 实现rem适配 */
@media screen and (max-width: 1024px) {
  /* 0-1024 用默认的1024的42*/
  html {
    font-size: 42.66px !important;
  }
}

@media screen and (min-width: 1920px) {
  /* 1920+ 用1920默认的80*/
  html {
    font-size: 80px !important;
  }
}
.viewport{
  min-width: 1024px;
  max-width: 1920px;

  /* 居中对齐 */
  margin: 0 auto;

  /* 背景图 ：不能把多余的裁剪掉，完全显示全 */
  background: url(../images/logo.png) no-repeat;
  background-size: contain;

  /* 只有宽没有高 背景图是显示不出来的 */
  min-height: 780px;

  display: flex;
  /* padding: 88px 20px 0; under 1920蓝图。随着屏幕的大小变化我们flexiblejs文件会检测屏幕宽度到并且重新划分24份（不用这个文件就要用媒体查询），且修改html文字大小（fontsize=100px等价于这一块占100像素），我们到时候rem会变的值钱，也有可能不值钱*/
  padding: 1.1rem 0.25rem 0;
}
.viewport .column{
  flex: 3;

  /* background-color: skyblue; */
}
.viewport .column:nth-child(2){
  flex: 4;
  margin: 0.4rem 0.25rem 0;
}




/* 公共面板样式 */
.panel{
  /* 其实不用那么费劲，直接div给个背景图且上个padding就行 */
  border: 15px solid transparent; 



  /* border-width: 51px 38px 20px 132px;*/
  /* 
  REM 分析 ： 原版蓝图宽度 1920px/24份=80px每份 -> 51px/80=0.6375 of一份。随着屏幕变大或小flexible会检测到其宽度然后修改html文字大小（fontsize=100px等价于这一块占100像素）。然后就是 Xpx/24份=Ypx每份 Zpx/Y=0.6375； Z就是我们缩小或放大后的实际宽度，这样，屏幕一旦缩，所有内容等比例缩放 

  border 分析 ： 这只是边框的宽度(实际宽度)，不是边框的图片的宽度(背景宽度不影响盒子)，但是后者默认宽度和前者一致(除非设置border-image-width)
  border-width 同时盖住了原先的15px
  如果使用border-image-width：字会压到（部分）图片的上面（我们有15实边距 which压不了）
  border-image-width：手动设置边框’图片‘的宽度，可以溢出默认的边框实际宽度（文字只会遵守实际宽度，如果图片宽度>边框宽度 则文字会压住图片 有的时候这就是我们要的效果）

  如果不给div设置宽高或者塞点东西进去，空白的话border-image-width超出border-width的部分不能显示
  */
  border-width: .6375rem .475rem .25rem 1.65rem;



  /* 这个属性盖住了原先的transparent */
  border-image-source:url(../images/border.png);



  /* 获得(切出) '4个边' 的 '背景图'：以px为单位来切原图，然后这个切出来的部分可以随意缩放：cover repeat 等 默认stretch 所以即使你切的再小，边框实际再大，也不会显示不全 */
  border-image-slice: 51 38 20 132;
  
  position: relative;
  margin-bottom: 0.25rem;
}
.panel2 {
  border: 1px solid transparent;
  border-image-width: 0.6375rem 0.475rem 0.25rem 1.65rem;

  border-image-source: url(../images/border.png);
  border-image-slice: 51 38 20 132;

  margin-bottom: 0.25rem;
}
.inner{
  /* inner就是里面有另外一层，盖住整个外层，并且有一个padding */
  position: absolute;

  /* 如果两个方向，不管是x轴还是y轴，都走的话，这就不简简单单是移动那么简单了，这就变成拉伸了 */
  top:-0.6375rem;
  left:-1.65rem;
  right:-0.475rem;
  bottom:-0.25rem;

  background-color:transparent;
  padding: .3rem .45rem;
}
.panel h3 {
  /* 1920px 下 20px ; 20px蓝图/80px每份蓝图 = 0.25rem */
  /* rem就是占的份数 */
  font-size: 0.25rem;
  color: #fff;
  font-weight: 400;
}



/* 概览区域模块制作 */
.overview {
  height: 1.375rem;
}
.overview ul {
  display: flex;
  justify-content: space-between;
}
.overview ul li h4 {
  font-size: 0.35rem;
  color: #fff;
  margin: 0 0 0.1rem 0.06rem;
}
.overview ul li span {
  font-size: 0.2rem;
  color: #4c9bfd;
}





/* 监控区域模块制作 */
/* 外形 */
.monitor{
  /* 原版蓝图宽度 1920px/24份=80px每份 。在原蓝图下这个区域是480px -> 480/80=6rem -> 占了6份/24份 */
  height: 6rem;
}
.monitor .inner {
  padding: 0.3rem 0;
  display: flex;
  flex-direction: column;
}
.monitor .tabs {
  padding: 0 0.45rem;
  margin-bottom: 0.225rem;
  display: flex;
}
.monitor .tabs a {
  color: #1950c4;
  font-size: 0.225rem;
  padding: 0 0.3375rem;
}
.monitor .tabs a:first-child {
  padding-left: 0;
  border-right: 0.025rem solid #00f2f1;
}
.monitor .tabs a.active {
  color: #fff;
}
.monitor .content {
  flex: 1;
  position: relative;

  /* 默认隐藏：注意我们行内已经将第一个显示了 */
  display: none;
}
.monitor .head {
  display: flex;
  justify-content: space-between;
  line-height: 1.05;
  background-color: rgba(255, 255, 255, 0.1);
  padding: 0.15rem 0.45rem;
  color: #68d8fe;
  font-size: 0.175rem;
}
.monitor .marquee-view {
  position: absolute;
  top: 0.5rem;
  bottom: 0;
  width: 100%;
  overflow: hidden;
}


/* 内部 */
.monitor .row {
  display: flex;
  justify-content: space-between;
  line-height: 1.05;
  font-size: 0.15rem;
  color: #61a8ff;
  padding: 0.15rem 0.45rem;
}
.monitor .row .icon-dot {
  position: absolute;
  left: 0.2rem;
  opacity: 0;
}
.monitor .row:hover {
  background-color: rgba(255, 255, 255, 0.1);
  color: #68d8fe;
}
.monitor .row:hover .icon-dot {
  opacity: 1;
}
.monitor .col:first-child {
  width: 1rem;
}
.monitor .col:nth-child(2) {
  width: 2.5rem;

  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}
.monitor .col:nth-child(3) {
  width: 1rem;
}

/* 通过CSS3动画滚动marquee */
@keyframes move {
  /* 现在已经将rows克隆 往上走自身高度一半就是 克隆那一部分抵达顶部时（无法看见原来的那一部分了） */
  /*
    1
    2
    3
    1-C
    2-C
    3-C
  */
  0% {
  }
  100% {
    
    transform: translateY(-50%);
  }
}
.marquee-view .marquee{
  /* animation: name duration timing-function delay iteration-count direction fill-mode; */
  animation: move 20s linear infinite;

  /* 当我们 执行动画 至已经走到一半高度了（替补完全上场）这个时候重新执行动画，aka translateY(-50%); 会失效，aka跳回（肉眼看不见的速度）本体（非替身）的头部 */
}
/* 3.鼠标经过marquee 就停止动画 */
.marquee-view .marquee:hover{
  animation-play-state: paused;
}








/* 点位分布统计模块制作 */
.point {
  height: 4.25rem;
}
.point .chart {
  display: flex;
  margin-top: 0.3rem;
  justify-content: space-between;
}
.point .pie {
  width: 3.9rem;
  height: 3rem;
  margin-left: -0.125rem;
}
.point .data {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 2.1rem;
  padding: 0.45rem 0.375rem;
  box-sizing: border-box;
  background-image: url(../images/rect.png);
  background-size: cover;
}
.point h4 {
  margin-bottom: 0.15rem;
  font-size: 0.35rem;
  color: #fff;
}
.point span {
  display: block;
  color: #4c9bfd;
  font-size: 0.2rem;
}



/* 地图模块制作 */
.map {
  height: 7.225rem;
  margin-bottom: 0.25rem;
  display: flex;
  flex-direction: column;
}
.map h3 {
  line-height: 1;
  padding: 0.2rem 0;
  margin: 0;
  font-size: 0.25rem;
  color: #fff;
  font-weight: 400;
}
.map .icon-cube {
  color: #68d8fe;
}
.map .chart {
  flex: 1;
  background-color: rgba(255, 255, 255, 0.05);
}
.map .geo {
  width: 100%;
  height: 100%;
}
/* 用户统计模块 */
.users {
  height: 4.25rem;
  display: flex;
}
.users .chart {
  display: flex;
  margin-top: 0.3rem;
}
.users .bar {
  width: 7.35rem;
  height: 3rem;
}
.users .data {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  width: 2.1rem;
  padding: 0.45rem 0.375rem;
  box-sizing: border-box;
  background-image: url(../images/rect.png);
  background-size: cover;
}
.users h4 {
  margin-bottom: 0.15rem;
  font-size: 0.35rem;
  color: #fff;
}
.users span {
  display: block;
  color: #4c9bfd;
  font-size: 0.2rem;
}
/* 订单模块制作 */
.order {
  height: 1.875rem;
}
.order .filter {
  display: flex;
}
.order .filter a {
  display: block;
  height: 0.225rem;
  line-height: 1;
  padding: 0 0.225rem;
  color: #1950c4;
  font-size: 0.225rem;
  border-right: 0.025rem solid #00f2f1;
}
.order .filter a:first-child {
  padding-left: 0;
}
.order .filter a:last-child {
  border-right: none;
}
.order .filter a.active {
  color: #fff;
  font-size: 0.25rem;
}
.order .data {
  display: flex;
  margin-top: 0.25rem;
}
.order .item {
  width: 50%;
}
.order h4 {
  font-size: 0.35rem;
  color: #fff;
  margin-bottom: 0.125rem;
}
.order span {
  display: block;
  color: #4c9bfd;
  font-size: 0.2rem;
}
/* 销售区域 */
.sales {
  height: 3.1rem;
}
.sales .caption {
  display: flex;
  line-height: 1;
}
.sales h3 {
  height: 0.225rem;
  padding-right: 0.225rem;
  border-right: 0.025rem solid #00f2f1;
}
.sales a {
  padding: 0.05rem;
  font-size: 0.2rem;
  margin: -0.0375rem 0 0 0.2625rem;
  border-radius: 0.0375rem;
  color: #0bace6;
}
.sales a.active {
  background-color: #4c9bfd;
  color: #fff;
}
.sales .inner {
  display: flex;
  flex-direction: column;
}
.sales .chart {
  flex: 1;
  padding-top: 0.1875rem;
  position: relative;
}
.sales .label {
  position: absolute;
  left: 0.525rem;
  top: 0.225rem;
  color: #4996f5;
  font-size: 0.175rem;
}
.sales .line {
  width: 100%;
  height: 100%;
  /* background-color: pink; */
}
/* 渠道分布以及季度销售模块 */
.wrap {
  display: flex;
}
.channel,
.quarter {
  flex: 1;
  height: 2.9rem;
}
.channel {
  margin-right: 0.25rem;
}
.channel .data {
  overflow: hidden;
}
.channel .data .radar {
  height: 2.1rem;
  width: 100%;
}
.channel h4 {
  color: #fff;
  font-size: 0.4rem;
  margin-bottom: 0.0625rem;
}
.channel small {
  font-size: 50%;
}
.channel span {
  display: block;
  color: #4c9bfd;
  font-size: 0.175rem;
}
/* 季度区块 */
.quarter .inner {
  display: flex;
  flex-direction: column;
  margin: 0 -0.075rem;
}
.quarter .chart {
  flex: 1;
  padding-top: 0.225rem;
}
.quarter .box {
  position: relative;
}
.quarter .label {
  transform: translate(-50%, -30%);
  color: #fff;
  font-size: 0.375rem;
  position: absolute;
  left: 50%;
  top: 50%;
}
.quarter .label small {
  font-size: 50%;
}
.quarter .gauge {
  height: 1.05rem;
}
.quarter .data {
  display: flex;
  justify-content: space-between;
}
.quarter .item {
  width: 50%;
}
.quarter h4 {
  color: #fff;
  font-size: 0.3rem;
  margin-bottom: 0.125rem;
}
.quarter span {
  display: block;
  width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  color: #4c9bfd;
  font-size: 0.175rem;
}
/* 全国热榜模块制作 */
/* 排行榜 */
.top {
  height: 3.5rem;
}
.top .inner {
  display: flex;
}
.top .all {
  display: flex;
  flex-direction: column;
  width: 2.1rem;
  color: #4c9bfd;
  font-size: 0.175rem;
  vertical-align: middle;
}
.top .all ul {
  padding-left: 0.15rem;
  margin-top: 0.15rem;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
}
.top .all li {
  overflow: hidden;
}
.top .all [class^="icon-"] {
  font-size: 0.45rem;
  vertical-align: middle;
  margin-right: 0.15rem;
}
.top .province {
  flex: 1;
  display: flex;
  flex-direction: column;
  color: #fff;
}
.top .province i {
  padding: 0 0.15rem;
  margin-top: 0.0625rem;
  float: right;
  font-style: normal;
  font-size: 0.175rem;
  color: #0bace6;
}
.top .province s {
  display: inline-block;
  transform: scale(0.8);
  text-decoration: none;
}
.top .province .icon-up {
  color: #dc3c33;
}
.top .province .icon-down {
  color: #36be90;
}
.top .province .data {
  flex: 1;
  display: flex;
  margin-top: 0.175rem;
}
.top .province ul {
  flex: 1;
  line-height: 1;
  margin-bottom: 0.175rem;
}
.top .province ul li {
  display: flex;
  justify-content: space-between;
}
.top .province ul span {
  display: block;
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}
.top .province ul.sup {
  font-size: 0.175rem;
}
.top .province ul.sup li {
  color: #4995f4;
  padding: 0.15rem;
}
.top .province ul.sup li.active {
  color: #a3c6f2;
  background-color: rgba(10, 67, 188, 0.2);
}
.top .province ul.sub {
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  font-size: 0.15rem;
  background-color: rgba(10, 67, 188, 0.2);
}
.top .province ul.sub li {
  color: #52ffff;
  padding: 0.125rem 0.175rem;
}
.clock {
  position: absolute;
  top: -0.45rem;
  right: 0.5rem;
  font-size: 0.25rem;
  color: #0bace6;
}
.clock i {
  margin-right: 5px;
  font-size: 0.25rem;
}
@media screen and (max-width: 1600px) {
  .top span {
    transform: scale(0.9);
  }
  .top .province ul.sup li {
    padding: 0.125rem 0.15rem;
  }
  .top .province ul.sub li {
    padding: 0.0625rem 0.15rem;
  }
  .quarter span {
    transform: scale(0.9);
  }
}